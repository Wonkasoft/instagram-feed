/*===============================================
=            for setting box-shadows            =
===============================================*/
$box_shadow_1: 0 1px 6px 0 rgba( #000, .1 );
$box_shadow_2: 0 1px 6px 0 rgba( #000, .2 );
$box_shadow_3: 0 1px 6px 0 rgba( #000, .3 );
$box_shadow_4: 0 1px 6px 0 rgba( #000, .4 );
$box_shadow_5: 0 1px 6px 0 rgba( #000, .5 );
$box_shadow_6: 0 1px 6px 0 rgba( #000, .6 );
$box_shadow_7: 0 1px 6px 0 rgba( #000, .7 );
$box_shadow_8: 0 1px 6px 0 rgba( #000, .8 );
$box_shadow_9: 0 1px 6px 0 rgba( #000, .9 );
$box_shadow_10: 0 1px 6px 0 rgba( #000, 1 );
/*=====  End of for setting box-shadows  ======*/

/*=============================================
=            for transition speeds            =
=============================================*/
$trans_1: all 0.1s ease-in-out;
$trans_15: all 0.15s ease-in-out;
$trans_2: all 0.2s ease-in-out;
$trans_25: all 0.25s ease-in-out;
$trans_3: all 0.3s ease-in-out;
$trans_35: all 0.35s ease-in-out;
$trans_4: all 0.4s ease-in-out;
$trans_45: all 0.45s ease-in-out;
/*=====  End of for transition speeds  ======*/


// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

// Set the prefixes
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value;
  }

// Output standard non-prefixed declaration
#{$property}: $value;
}

// Set the prefixes
@mixin value_prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{$property}: '-' + $prefix + '-' + $value;
  }

// Output standard non-prefixed declaration
#{$property}: $value;
}

@mixin media-breakpoint-up( $breakpoint ) {
	@if $breakpoint == sm {
		@media ( min-width: 576px ) {
			@content;
		}
	}
	@if $breakpoint == md {
		@media ( min-width: 768px ) {
			@content;
		}
	}
	@if $breakpoint == lg {
		@media ( min-width: 992px ) {
			@content;
		}
	}
	@if $breakpoint == xl {
		@media ( min-width: 1200px ) {
			@content;
		}
	}
	@if $breakpoint == xxl {
		@media ( min-width: 1460px ) {
			@content;
		}
	}

}

@mixin clear-webkits( $value, $types: () ) {
	@each $type in $types {
		#{'-webkit-'+ $type}: $value;
	}
}